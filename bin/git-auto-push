#!/bin/bash

# ANSI 颜色代码
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
ORANGE='\033[0;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color, 用于关闭颜色效果

# 设定 Git commit 的消息
# commit_message="wip"

# 使用环境变量来定义目录的数组
declare -a repos=(
  "${WORK_DIR}/uguzi/admin"
  "${WORK_DIR}/uguzi/backend"
  "${WORK_DIR}/uchiwu-online/admin"
  "${WORK_DIR}/uchiwu-online/backend"
  "${WORK_DIR}/chiwushe/admin"
  "${WORK_DIR}/chiwushe/backend"
)

# 开始处理每一个仓库目录
for REPO in "${repos[@]}"; do
  # echo "Processing repository: $REPO"
  echo -e "${ORANGE}==> Processing repository: $REPO${NC}"

  # 检查指定的目录是否为 Git 仓库
  if [ ! -d "$REPO/.git" ]; then
    echo -e "${RED}==> Skipping - Not a Git repository${NC}"
    continue
  fi

  cd "$REPO"
  # 获取当前分支名称
  BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)

  # 检查当前分支是否有未提交的更改
  CHANGED=$(git status --porcelain)
  if [ -n "$CHANGED" ]; then
      # 有未提交的更改
      if [ "$BRANCH_NAME" == "main" ] || [ "$BRANCH_NAME" == "master" ]; then
          # 当前分支是main或master，创建新分支并提交
          NEW_BRANCH="dev-$(date +%Y%m%d%H%M%S)" # 根据分支命名习惯调整
          git checkout -b "$NEW_BRANCH"
          git add .
          git commit -m "Auto commit on new branch $NEW_BRANCH"
          BRANCH_NAME=$NEW_BRANCH # 更新当前分支名称，以便后续推送
      else
          # 直接提交到当前分支
          git add .
          git commit -m "Auto commit on branch $BRANCH_NAME"
      fi
  fi

  # 推送到远程仓库
  if ! git push origin "$BRANCH_NAME"; then
      echo "${RED}Failed to push changes to the remote branch $BRANCH_NAME of $REPO.${NC}"
  fi

  echo ""

  # 返回初始目录以处理下一个仓库
  cd - > /dev/null
done

echo "All repositories processed."

